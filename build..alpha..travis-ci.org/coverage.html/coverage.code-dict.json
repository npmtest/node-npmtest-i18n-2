{"/home/travis/build/npmtest/node-npmtest-i18n-2/test.js":"/* istanbul instrument in package npmtest_i18n_2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-i18n-2/lib.npmtest_i18n_2.js":"/* istanbul instrument in package npmtest_i18n_2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_i18n_2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_i18n_2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-i18n-2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-i18n-2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_i18n_2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_i18n_2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_i18n_2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_i18n_2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_i18n_2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_i18n_2.__dirname + '/lib.npmtest_i18n_2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-i18n-2/node_modules/i18n-2/index.js":"module.exports = require('./i18n');\n","/home/travis/build/npmtest/node-npmtest-i18n-2/node_modules/i18n-2/i18n.js":"/**\n * @author  John Resig <jeresig@gmail.com>\n * @author  Originally by Marcus Spiegel <marcus.spiegel@gmail.com>\n * @link    https://github.com/jeresig/i18n-node\n * @license http://opensource.org/licenses/MIT\n *\n * @version 0.4.7\n */\n\n// dependencies\nvar vsprintf = require(\"sprintf\").vsprintf,\n\t\tfs = require(\"fs\"),\n\t\tpath = require(\"path\");\n\n\nfunction dotNotation (obj, is, value) {\n\tif (obj.hasOwnProperty(is)) {\n\t\treturn obj[is];\n\t}\n\n\tif (typeof is === 'string') {\n\t\treturn dotNotation(obj, is.split('.'), value);\n\t} else if (is.length === 1 && value !== undefined) {\n\t\treturn obj[is[0]] = value;\n\t} else if (is.length === 0) {\n\t\treturn obj;\n\t} else {\n\t\tif (obj.hasOwnProperty(is[0])) {\n\t\t\treturn dotNotation(obj[is[0]], is.slice(1), value);\n\t\t} else {\n\t\t\treturn obj[is.join('.')] = is.join('.');\n\t\t}\n\t}\n}\n\nvar i18n = module.exports = function (opt) {\n\tvar self = this;\n\n\t// Put into dev or production mode\n\tthis.devMode = process.env.NODE_ENV !== \"production\";\n\n\t// Copy over options\n\tfor (var prop in opt) {\n\t\tthis[prop] = opt[prop];\n\t}\n\n\t// you may register helpers in global scope, up to you\n\tif (typeof this.register === \"object\") {\n\t\ti18n.resMethods.forEach(function (method) {\n\t\t\tself.register[method] = self[method].bind(self);\n\t\t});\n\t}\n\n\t// implicitly read all locales\n\t// if it's an array of locale names, read in the data\n\tif (opt.locales && opt.locales.forEach) {\n\t\tthis.locales = {};\n\n\t\topt.locales.forEach(function (locale) {\n\t\t\tself.readFile(locale);\n\t\t});\n\n\t\tthis.defaultLocale = opt.locales[0];\n\t}\n\n\t// Set the locale to the default locale\n\tthis.setLocale(this.defaultLocale);\n\n\t// Check the defaultLocale\n\tif (!this.locales[this.defaultLocale]) {\n\t\tconsole.error(\"Not a valid default locale.\");\n\t}\n\n\tif (this.request) {\n\t\tif (this.subdomain) {\n\t\t\tthis.setLocaleFromSubdomain(this.request);\n\t\t}\n\n\t\tif (this.query !== false) {\n\t\t\tthis.setLocaleFromQuery(this.request);\n\t\t}\n\n\t\tif (this.session !== false) {\n\t\t\tthis.setLocaleFromSessionVar(this.request);\n\t\t}\n\n\t\tthis.prefLocale = this.preferredLocale();\n\n\t\tif (this.prefLocale !== false && this.prefLocale !== this.locale) {\n\t\t\tthis.setLocale(this.prefLocale);\n\t\t}\n\t}\n};\n\ni18n.version = \"0.4.7\";\n\ni18n.localeCache = {};\ni18n.resMethods = [\"__\", \"__n\", \"getLocale\", \"isPreferredLocale\"];\n\ni18n.expressBind = function (app, opt) {\n\tif (!app) {\n\t\treturn;\n\t}\n\n\tapp.use(function (req, res, next) {\n\t\topt.request = req;\n\t\treq.i18n = new i18n(opt);\n\n\t\t// Express 3\n\t\tif (res.locals) {\n\t\t\ti18n.registerMethods(res.locals, req)\n\t\t}\n\n\t\tnext();\n\t});\n\n\t// Express 2\n\tif (app.dynamicHelpers) {\n\t\tapp.dynamicHelpers(i18n.registerMethods({}));\n\t}\n};\n\ni18n.registerMethods = function (helpers, req) {\n\ti18n.resMethods.forEach(function (method) {\n\t\tif (req) {\n\t\t\thelpers[method] = req.i18n[method].bind(req.i18n);\n\t\t} else {\n\t\t\thelpers[method] = function (req) {\n\t\t\t\treturn req.i18n[method].bind(req.i18n);\n\t\t\t};\n\t\t}\n\n\t});\n\n\treturn helpers;\n};\n\ni18n.prototype = {\n\tdefaultLocale: \"en\",\n\textension: \".js\",\n\tdirectory: \"./locales\",\n\tcookieName: \"lang\",\n\tsessionVarName: \"locale\",\n\tindent: \"\\t\",\n\n\tparse: JSON.parse,\n\n\tdump: function (data, indent) {\n\t  return JSON.stringify(data, null, indent);\n\t},\n\n\t__: function () {\n\t\tvar msg = this.translate(this.locale, arguments[0]);\n\n\t\tif (arguments.length > 1) {\n\t\t\tmsg = vsprintf(msg, Array.prototype.slice.call(arguments, 1));\n\t\t}\n\n\t\treturn msg;\n\t},\n\n\t__n: function (pathOrSingular, countOrPlural, additionalOrCount) {\n\t\tvar msg;\n\t\tif (typeof countOrPlural === 'number') {\n\t\t\tvar path = pathOrSingular;\n\t\t\tvar count = countOrPlural;\n\t\t\tmsg = this.translate(this.locale, path);\n\n\t\t\tmsg = vsprintf(parseInt(count, 10) > 1 ? msg.other : msg.one, Array.prototype.slice.call(arguments, 1));\n\t\t} else {\n\t\t\tvar singular = pathOrSingular;\n\t\t\tvar plural = countOrPlural;\n\t\t\tvar count = additionalOrCount;\n\t\t\tmsg = this.translate(this.locale, singular, plural);\n\n\t\t\tmsg = vsprintf(parseInt(count, 10) > 1 ? msg.other : msg.one, [count]);\n\n\t\t\tif (arguments.length > 3) {\n\t\t\t\tmsg = vsprintf(msg, Array.prototype.slice.call(arguments, 3));\n\t\t\t}\n\t\t}\n\n\t\treturn msg;\n\t},\n\n\tsetLocale: function (locale) {\n\n\t\tif (!locale) return;\n\n\t\tif (!this.locales[locale]) {\n\t\t\tif (this.devMode) {\n\t\t\t\tconsole.warn(\"Locale (\" + locale + \") not found.\");\n\t\t\t}\n\n\t\t\tlocale = this.defaultLocale;\n\t\t}\n\n\t\treturn (this.locale = locale);\n\t},\n\n\tgetLocale: function () {\n\t\treturn this.locale;\n\t},\n\n\tisPreferredLocale: function () {\n\t\treturn !this.prefLocale ||\n\t\t\t\tthis.prefLocale === this.getLocale();\n\t},\n\n\tsetLocaleFromSessionVar: function (req) {\n\t\treq = req || this.request;\n\n\t\tif (!req || !req.session || !req.session[this.sessionVarName]) {\t\t\n\t\t\treturn;\n\t\t}\n\n\t\tvar locale = req.session[this.sessionVarName];\n\n\t\tif (this.locales[locale]) {\n\t\t\tif (this.devMode) {\n\t\t\t\tconsole.log(\"Overriding locale from query: \" + locale);\n\t\t\t}\n\t\t\tthis.setLocale(locale);\n\t\t}\n\n\t},\n\n\tsetLocaleFromQuery: function (req) {\n\t\treq = req || this.request;\n\n\t\tif (!req || !req.query || !req.query.lang) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar locale = (req.query.lang+'').toLowerCase();\n\n\t\tif (this.locales[locale]) {\n\t\t\tif (this.devMode) {\n\t\t\t\tconsole.log(\"Overriding locale from query: \" + locale);\n\t\t\t}\n\n\t\t\tthis.setLocale(locale);\n\t\t}\n\t},\n\n\tsetLocaleFromSubdomain: function (req) {\n\t\treq = req || this.request;\n\n\t\tif (!req || !req.headers || !req.headers.host) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (/^([^.]+)/.test(req.headers.host) && this.locales[RegExp.$1]) {\n\t\t\tif (this.devMode) {\n\t\t\t\tconsole.log(\"Overriding locale from host: \" + RegExp.$1);\n\t\t\t}\n\n\t\t\tthis.setLocale(RegExp.$1);\n\t\t}\n\t},\n\n\tsetLocaleFromCookie: function (req) {\n\t\treq = req || this.request;\n\n\t\tif (!req || !req.cookies || !this.cookieName || !req.cookies[this.cookieName]) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar locale = req.cookies[this.cookieName].toLowerCase();\n\n\t\tif (this.locales[locale]) {\n\t\t\tif (this.devMode) {\n\t\t\t\tconsole.log(\"Overriding locale from cookie: \" + locale);\n\t\t\t}\n\n\t\t\tthis.setLocale(locale);\n\t\t}\n\t},\n\n\tsetLocaleFromEnvironmentVariable: function () {\n\t\tif (!process.env.LANG) {\n\t\t\treturn;\n\t\t}\n\t\tvar locale = process.env.LANG.split(\"_\")[0];\n\t\tif (this.locales[locale]) {\n\t\t\tif (this.devMode) {\n\t\t\t\tconsole.log(\"Overriding locale from environment variable: \" + locale);\n\t\t\t}\n\n\t\t\tthis.setLocale(locale);\n\t\t}\n\t},\n\n\tpreferredLocale: function (req) {\n\t\treq = req || this.request;\n\n\t\tif (!req || !req.headers) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar accept = req.headers[\"accept-language\"] || \"\",\n\t\t\t\tregExp = /(^|,\\s*)([a-z0-9-]+)/gi,\n\t\t\t\tself = this,\n\t\t\t\tprefLocale;\n\n\t\twhile (!prefLocale && (match = regExp.exec(accept))) {\n\t\t\tvar locale = match[2].toLowerCase();\n\t\t\tvar parts = locale.split(\"-\");\n\n\t\t\tif (self.locales[locale]) {\n\t\t\t\tprefLocale = locale;\n\t\t\t} else if (parts.length > 1 && self.locales[parts[0]]) {\n\t\t\t\tprefLocale = parts[0];\n\t\t\t}\n\t\t}\n\n\t\treturn prefLocale || this.defaultLocale;\n\t},\n\n\t// read locale file, translate a msg and write to fs if new\n\ttranslate: function (locale, singular, plural) {\n\t\tif (!locale || !this.locales[locale]) {\n\t\t\tif (this.devMode) {\n\t\t\t\tconsole.warn(\"WARN: No locale found. Using the default (\" +\n\t\t\t\t\t\tthis.defaultLocale + \") as current locale\");\n\t\t\t}\n\n\t\t\tlocale = this.defaultLocale;\n\n\t\t\tthis.initLocale(locale, {});\n\t\t}\n\n\t\tif (!this.locales[locale][singular]) {\n\t\t\tif (this.devMode) {\n\t\t\t\tdotNotation(this.locales[locale], singular, plural ? { one: singular, other: plural } : undefined);\n\t\t\t\tthis.writeFile(locale);\n\t\t\t}\n\t\t}\n\n\t\treturn dotNotation(this.locales[locale], singular, plural ? { one: singular, other: plural } : undefined);\n\t},\n\n\t// try reading a file\n\treadFile: function (locale) {\n\t\tvar file = this.locateFile(locale);\n\n\t\tif (!this.devMode && i18n.localeCache[file]) {\n\t\t\tthis.initLocale(locale, i18n.localeCache[file]);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tvar localeFile = fs.readFileSync(file);\n\t\t\tvar base;\n\n\t\t\t// reading base file if 'base' provided\n\t\t\tif (typeof this.base === \"function\") {\n\t\t\t\tvar baseFilename;\n\n\t\t\t\ttry {\n\t\t\t\t\tbaseFilename = this.base(locale);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('base function threw exception for locale %s', locale, e);\n\t\t\t\t}\n\n\t\t\t\tif (typeof baseFilename === \"string\") {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbase = this.parse(fs.readFileSync(this.locateFile(baseFilename)));\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error('unable to read or parse base file %s for locale %s', baseFilename, locale, e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// parsing file content\n\t\t\t\tvar content = this.parse(localeFile);\n\n\t\t\t\tif (base) {\n\t\t\t\t\t// writing content to the base and swapping\n\t\t\t\t\tfor (var prop in content) {\n\t\t\t\t\t\tbase[prop] = content[prop];\n\t\t\t\t\t}\n\t\t\t\t\tcontent = base;\n\t\t\t\t}\n\n\t\t\t\t// putting content to locales[locale]\n\t\t\t\tthis.initLocale(locale, content);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('unable to parse locales from file (maybe ' + file +\n\t\t\t\t\t\t' is empty or invalid ' + this.extension + '?): ', e);\n\t\t\t}\n\n\t\t} catch (e) {\n\t\t\t// unable to read, so intialize that file\n\t\t\t// locales[locale] are already set in memory, so no extra read required\n\t\t\t// or locales[locale] are empty, which initializes an empty locale.json file\n\t\t\tif (!fs.existsSync(file)) {\n\t\t\t\tthis.writeFile(locale);\n\t\t\t}\n\t\t}\n\t},\n\n\t// try writing a file in a created directory\n\twriteFile: function (locale) {\n\t\t// don't write new locale information to disk if we're not in dev mode\n\t\tif (!this.devMode) {\n\t\t\t// Initialize the locale if didn't exist already\n\t\t\tthis.initLocale(locale, {});\n\t\t\treturn;\n\t\t}\n\n\t\t// creating directory if necessary\n\t\ttry {\n\t\t\tfs.lstatSync(this.directory);\n\n\t\t} catch (e) {\n\t\t\tif (this.devMode) {\n\t\t\t\tconsole.log('creating locales dir in: ' + this.directory);\n\t\t\t}\n\n\t\t\tfs.mkdirSync(this.directory, 0755);\n\t\t}\n\n\t\t// Initialize the locale if didn't exist already\n\t\tthis.initLocale(locale, {});\n\n\t\t// writing to tmp and rename on success\n\t\ttry {\n\t\t\tvar target = this.locateFile(locale),\n\t\t\t\t\ttmp = target + \".tmp\";\n\n\t\t\tfs.writeFileSync(tmp,\n\t\t\t\t\t\t\t this.dump(this.locales[locale], this.indent),\n\t\t\t\t\t\t\t \"utf8\");\n\n\t\t\tif (fs.statSync(tmp).isFile()) {\n\t\t\t\tfs.renameSync(tmp, target);\n\n\t\t\t} else {\n\t\t\t\tconsole.error('unable to write locales to file (either ' + tmp +\n\t\t\t\t\t\t' or ' + target + ' are not writeable?): ');\n\t\t\t}\n\n\t\t} catch (e) {\n\t\t\tconsole.error('unexpected error writing files (either ' + tmp +\n\t\t\t\t\t' or ' + target + ' are not writeable?): ', e);\n\t\t}\n\t},\n\n\t// basic normalization of filepath\n\tlocateFile: function (locale) {\n\t\treturn path.normalize(this.directory + '/' + locale + this.extension);\n\t},\n\n\tinitLocale: function (locale, data) {\n\t\tif (!this.locales[locale]) {\n\t\t\tthis.locales[locale] = data;\n\n\t\t\t// Only cache the files when we're not in dev mode\n\t\t\tif (!this.devMode) {\n\t\t\t\tvar file = this.locateFile(locale);\n\t\t\t\tif (!i18n.localeCache[file]) {\n\t\t\t\t\ti18n.localeCache[file] = data;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-i18n-2/node_modules/i18n-2/locales/at-de.js":"{\n\t\"Hello\": \"Hallo\",\n\t\"Hello %s, how are you today?\": \"Hallo %s, wie geht es dir heute?\",\n\t\"weekend\": \"Wochenende\",\n\t\"Hello %s, how are you today? How was your %s.\": \"Hallo %s, wie geht es dir heute? Wie war Ihre Reise nach Wien.\",\n\t\"Hi\": \"Hi\",\n\t\"Howdy\": \"Hallöchen\",\n\t\"%s cat\": {\n\t\t\"one\": \"%s Katze\",\n\t\t\"other\": \"%s Katzen\"\n\t},\n\t\"There is one monkey in the %%s\": {\n\t\t\"one\": \"Im %%s sitzt ein Affe\",\n\t\t\"other\": \"Im Baum sitzen %d Affen\"\n\t},\n\t\"tree\": \"Baum\"\n}\n","/home/travis/build/npmtest/node-npmtest-i18n-2/node_modules/i18n-2/locales/de.js":"{\n  \"Hello\": \"Hallo\",\n  \"Hello %s, how are you today?\": \"Hallo %s, wie geht es dir heute?\",\n  \"weekend\": \"Wochenende\",\n  \"Hello %s, how are you today? How was your %s.\": \"Hallo %s, wie geht es dir heute? Wie war dein %s.\",\n  \"Hi\": \"Hi\",\n  \"Howdy\": \"Hallöchen\",\n  \"%s cat\": {\n    \"one\": \"%s Katze\",\n    \"other\": \"%s Katzen\"\n  },\n  \"There is one monkey in the %%s\": {\n    \"one\": \"Im %%s sitzt ein Affe\",\n    \"other\": \"Im Baum sitzen %d Affen\"\n  },\n  \"tree\": \"Baum\"\n}\n","/home/travis/build/npmtest/node-npmtest-i18n-2/node_modules/i18n-2/locales/en.js":"{\n  \"Hello\": \"Hello\",\n  \"Hello %s, how are you today?\": \"Hello %s, how are you today?\",\n  \"weekend\": \"weekend\",\n  \"Hello %s, how are you today? How was your %s.\": \"Hello %s, how are you today? How was your %s.\",\n  \"Hi\": \"Hi\",\n  \"Howdy\": \"Howdy\",\n  \"%s cat\": {\n    \"one\": \"%s cat\",\n    \"other\": \"%s cats\"\n  },\n  \"There is one monkey in the %%s\": {\n    \"one\": \"There is one monkey in the %%s\",\n    \"other\": \"There are %d monkeys in the %%s\"\n  },\n  \"tree\": \"tree\"\n}\n"}